#!/bin/sh

set -u

OS="";
case "$OSTYPE" in
  solaris*) OS="SOLARIS" ;;
  darwin*)  OS="OSX" ;;
  linux*)   OS="LINUX" ;;
  bsd*)     OS="BSD" ;;
  msys*)    OS="WINDOWS" ;;
  *)        OS="UNKNOWN" ;;
esac

DOTFILES_DIR=$HOME/Src/dotfiles.git/

dotfiles() {
  git --git-dir=$DOTFILES_DIR --work-tree=$HOME "$@"
}

# pull dotfiles
if [[ ! -d $DOTFILES_DIR ]] ; then
  mkdir -p $DOTFILES_DIR
  git clone --bare  --recursive git@github.com/yld/dotfiles $DOTFILES_DIR
  dotfiles checkout
else
  if [[ "$(dotfiles status --porcelain | wc -l)" == "0" ]] ; then
    dotfiles pull --rebase
  else
    echo "You have some uncommitted changes in dotfiles files. Skipping update..."
  fi
fi

# see http://gmarik.info/blog/2010/05/02/tracking-dotfiles-with-git
dotfiles submodule init
dotfiles submodule update

TOOLS_INSTALLED="yes"
check_tool() {
  local TOOL=$1
  if [[ ! -x $(command -v $TOOL) ]]; then
    TOOLS_INSTALLED="no"
    echo "You should install $TOOL before continuing..."
  fi
}

for TOOL in "wget tmux tree"; do
  check_tool $TOOL
done

[[ $TOOLS_INSTALLED = "no" ]] && exit 1

case $OS in
  "OSX")
  [[ ! -L ~/Fonts  ]] && ln -sf ~/.fonts ~/Fonts;
  ;;
  *)
  echo "doing nothing...";
  ;;
esac

# zsh plugin install + dynamic configurations
if [[ -x $(command -v zsh) ]] ; then
  ZPLUGD=~/.zplugd
  [[ ! -d $ZPLUGD ]] && git clone https://github.com/zplug/zplug $ZPLUGD
  # echo ". ~/.zplugd/init.zsh ; [[ ! zplug check --verbose ]] && zplug install" | zsh -s
  # for shell in 'zsh fish bashrc'
  if [[ -x $(command -v grc) ]]; then
    if [[ -r  /etc/grc.zsh ]] ; then
      ln -sf ~/.zsh/grc.zsh /etc/grc.conf
    else
      wget https://raw.githubusercontent.com/garabik/grc/master/grc.zsh -O ~/.zsh/grc.zsh --quiet
    fi
  fi
fi

# TODO: factorize those 3 code block (waiting for snow)

# nodenv
NODENV_DIR=~/.nodenv # $(nodenv root)
NODENV_PLUGINS_DIR=${NODENV_DIR}/plugins

if [[ ! -d  $NODENV_DIR ]] ; then
 git clone https://github.com/nodenv/nodenv.git $NODENV_DIR
 pushd $NODENV_DIR &> /dev/null
 src/configure && make -C src
 popd &> /dev/null
 mkdir -p $NODENV_PLUGINS_DIR
fi

install_nodenv_plugin() {
  local NODENV_PLUGIN_DIR=${NODENV_PLUGINS_DIR}/$1
  local AUTHOR=${2:-'nodenv'}
  if [[ -d $NODENV_PLUGIN_DIR ]] ; then
    pushd $NODENV_PLUGIN_DIR &> /dev/null
    git pull
    popd &> /dev/null
  else
    echo "https://github.com/${AUTHOR}/${1}.git"
    git clone https://github.com/${AUTHOR}/${1}.git $NODENV_PLUGIN_DIR
  fi
}

for PLUGIN in node-build node-build-update-defs nodenv-update nodenv-vars nodenv-env nodenv-each nodenv-package-rehash nodenv-npm-migrate nodenv-default-packages nodenv-man; do
  install_nodenv_plugin $PLUGIN
done

nodenv package-hooks install --all

DEFAULT_NODENV_PKG_FILE=${NODENV_DIR}/default-packages
touch $DEFAULT_NODENV_PKG_FILE
for PKG in css-lint sass-lint stylelint prettier jsonlint ember-template-lint neovim; do
  grep "^${PKG}$" $DEFAULT_NODENV_PKG_FILE > /dev/null || echo $PKG >> $DEFAULT_NODENV_PKG_FILE
done

# rbenv
RBENV_DIR=~/.rbenv # $(rbenv root)
RBENV_PLUGINS_DIR=${RBENV_DIR}/plugins

if [[ ! -d  $RBENV_DIR ]] ; then
 git clone https://github.com/rbenv/rbenv.git $RBENV_DIR
 pushd $RBENV_DIR &> /dev/null
 src/configure && make -C src
 popd &> /dev/null
 mkdir -p $RBENV_PLUGINS_DIR
fi

install_rbenv_plugin() {
  local RBENV_PLUGINS_DIR=${RBENV_PLUGINS_DIR}/$1
  local AUTHOR=${2:-'rbenv'}
  if [[ -d $RBENV_PLUGINS_DIR ]] ; then
    pushd $RBENV_PLUGINS_DIR &> /dev/null
    git pull
    popd &> /dev/null
  else
    git clone https://github.com/${AUTHOR}/${1}.git $RBENV_PLUGINS_DIR
  fi
}

install_rbenv_plugin 'ruby-build'
install_rbenv_plugin 'rbenv-update' 'rkh'
install_rbenv_plugin 'rbenv-vars'
install_rbenv_plugin 'rbenv-each'
install_rbenv_plugin 'rbenv-default-gems'
install_rbenv_plugin 'rbenv-gemset' 'jf'
install_rbenv_plugin 'rbenv-env' 'ianheggie'
install_rbenv_plugin 'rbenv-ctags' 'tpope'
install_rbenv_plugin 'rbenv-bundler' 'carsomyr'
install_rbenv_plugin 'rbenv-update' 'rkh'
install_rbenv_plugin 'rbenv-clean' 'jbernsie'
echo "you should run 'rbenv bundler on' to enable rbenv-bundler"

DEFAULT_RBENV_PKG_FILE=${RBENV_DIR}/default-gems
touch $DEFAULT_RBENV_PKG_FILE
for PKG in gem-ctags awesome_print pry bundler rubocop haml_lint brakeman rubocop-rspec rails_best_practices sqlint erubi mdl neovim; do
  grep "^${PKG}$" $DEFAULT_RBENV_PKG_FILE > /dev/null || echo $PKG >> $DEFAULT_RBENV_PKG_FILE
done

# pyenv
PYENV_DIR=~/.pyenv # $(pyenv root)
PYENV_PLUGINS_DIR=${PYENV_DIR}/plugins

if [[ ! -d  $PYENV_DIR ]] ; then
 git clone https://github.com/pyenv/pyenv.git $PYENV_DIR
 pushd $PYENV_DIR &> /dev/null
 src/configure && make -C src
 popd &> /dev/null
 mkdir -p $PYENV_PLUGINS_DIR
fi

install_pyenv_plugin() {
  local PYENV_PLUGIN_DIR=${PYENV_PLUGINS_DIR}/$1
  local AUTHOR=${2:-'pyenv'}
  if [[ -d $PYENV_PLUGIN_DIR ]] ; then
    pushd $PYENV_PLUGIN_DIR &> /dev/null
    git pull
    popd &> /dev/null
  else
    git clone https://github.com/${AUTHOR}/${1}.git $PYENV_PLUGIN_DIR
  fi
}

install_pyenv_plugin 'pyenv-doctor'
# install_pyenv_plugin 'pyenv-doctor'
install_pyenv_plugin 'pyenv-update'
install_pyenv_plugin 'pyenv-pip-update' 'massongit'
install_pyenv_plugin 'pyenv-pip-rehash'
install_pyenv_plugin 'pyenv-pip-migrate'
install_pyenv_plugin 'pyenv-default-packages' 'jawshooah'
install_pyenv_plugin 'pyenv-virtualenv'

DEFAULT_PYENV_PKG_FILE=${PYENV_DIR}/default-packages
touch $DEFAULT_PYENV_PKG_FILE
for PKG in jq vim-vint yamllint; do
  grep "^${PKG}$" $DEFAULT_PYENV_PKG_FILE > /dev/null || echo $PKG >> $DEFAULT_PYENV_PKG_FILE
done

# vim part
if [[ -x $(command -v vim) ]] ; then
  BUNDLE_DIR=~/.vim/bundle
  VUNDLE_DIR=${BUNDLE_DIR}/vundle
  # mkdir -p $VUNDLE_DIR > /dev/null
  mkdir -p ~/.vim/{backup,swp} >> /dev/null
  if [[ ! -d $VUNDLE_DIR ]] ; then
    mkdir -p $BUNDLE_DIR && git clone https://github.com/gmarik/vundle.git $VUNDLE_DIR
    vim +PluginInstall +qall
  else
    # fix for https://github.com/VundleVim/Vundle.vim/issues/470
    pushd $VUNDLE_DIR >> /dev/null
    git pull
    popd > /dev/null
    vim +PluginUpdate +qall
    vim +PluginClean! +qall
  fi
fi

#nvim part
if [[ -x $(command -v nvim) ]] ; then
  PLUGGED_DIR=~/.local/share/nvim/plugged
  if [[ ! -d $PLUGGED_DIR ]] ; then
    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    mkdir -p $PLUGGED_DIR
    nvim +PlugInstall! +qall
  else
    nvim +PlugUpdate! +qall
  fi
fi

# yarn
# NOTE: yarn is installed as a plugin for zsh but we enforce its installation here
[[ ! -x $(command -v yarn) ]] || (curl -o- -L https://yarnpkg.com/install.sh | bash)
# yarn global add sass-lint stylelint prettier jsonlint ember-template-lint --check-files --dev

for PROG in 'shellcheck' ; do
  [[ ! -x $(command -v $PROG) ]] && echo "you should install $PROG"
done
