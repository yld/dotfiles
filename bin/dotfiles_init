#!/bin/bash

set -u

OS="";
case "$OSTYPE" in
  solaris*) OS="SOLARIS" ;;
  darwin*)  OS="OSX" ;;
  linux*)   OS="LINUX" ;;
  bsd*)     OS="BSD" ;;
  msys*)    OS="WINDOWS" ;;
  *)        OS="UNKNOWN" ;;
esac

DOTFILES_DIR=$HOME/Src/dotfiles.git/

dotfiles() {
  git --git-dir="${DOTFILES_DIR}" --work-tree="$HOME" "$@"
}

# pull dotfiles
if [[ ! -d $DOTFILES_DIR ]] ; then
  mkdir -p "$DOTFILES_DIR"
  git clone --bare  --recursive git@github.com/yld/dotfiles "$DOTFILES_DIR"
  dotfiles checkout
else
  if [[ "$(dotfiles status --porcelain | wc -l)" == "0" ]] ; then
    dotfiles pull --rebase
  else
    echo "You have some uncommitted changes in dotfiles files. Skipping update..."
  fi
fi

TOOLS_INSTALLED="yes"

check_tool() {
  local TOOL=$1
  if [[ ! -x $(command -v "$TOOL") ]]; then
    TOOLS_INSTALLED="no"
    echo "You should install $TOOL before continuing..."
  fi
}


for TOOL in wget tmux tree ag zsh pwgen shellcheck jq keychain nvim ctags; do
  check_tool "$TOOL"
done

brew_check_and_install() {
  local TOOL=$1
  if [[ ! $(brew ls --versions "$TOOL") ]]; then
    brew install "$TOOL"
  fi
}

case $OS in
  "OSX")
  [[ ! -x $(command -v "brew") ]] && /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  [[ ! -L ~/Fonts  ]] && ln -sf ~/.fonts ~/Fonts;
  for TOOL in "gnu-sed wxmac"; do
    brew_check_and_install "$TOOL"
  done
  ;;
  "LINUX")
  for TOOL in "gnu-sed wxmac"; do
    # FIXME: handle something else than debian
    apt-get install -y "$TOOL"
  done
  ;;
  *)
  echo "Continuing";
  ;;
esac

[[ "$TOOLS_INSTALLED" = "no" ]] && exit 1

# zsh plugin install + dynamic configurations
if [[ -x $(command -v zsh) ]] ; then
  ZPLUGD=~/.zplugd
  [[ ! -d $ZPLUGD ]] && git clone https://github.com/zplug/zplug $ZPLUGD
  if [[ -x $(command -v grc) ]]; then
    if [[ -r  /etc/grc.zsh ]] ; then
      ln -sf ~/.zsh/grc.zsh /etc/grc.conf
    else
      wget https://raw.githubusercontent.com/garabik/grc/master/grc.zsh -O ~/.zsh/grc.zsh --quiet
    fi
  fi
fi

# asdf
if [[ ! -d $HOME/.asdf ]] ; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.4.3
fi

DEFAULT_NODE_ASDF_PKG_FILE="${HOME}/.default-npm-packages"
touch "$DEFAULT_NODE_ASDF_PKG_FILE"
for PKG in css-lint sass-lint eslint typescript-eslint babel-eslint stylelint prettier jsonlint ember-template-lint neovim prettier; do
  grep "^${PKG}$" "$DEFAULT_NODE_ASDF_PKG_FILE" > /dev/null || echo "$PKG" >> "$DEFAULT_NODE_ASDF_PKG_FILE"
done

# Node.js release team's OpenPGP keys
bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring

DEFAULT_RUBY_ADSF_PKG_FILE="${HOME}/.default-gems"
touch "$DEFAULT_RUBY_ADSF_PKG_FILE"
for PKG in gem-ctags gem-browse awesome_print pry bundler rubocop haml_lint brakeman rubocop-rspec rails_best_practices sqlint erubi mdl neovim gist landscape; do
  grep "^${PKG}$" "$DEFAULT_RUBY_ADSF_PKG_FILE" > /dev/null || echo "$PKG" >> "$DEFAULT_RUBY_ADSF_PKG_FILE"
done

# install plugins
awk '{print("asdf plugin-add "$1)}' ~/.tool-versions | sh > /dev/null
# update plugins
asdf plugin-update --all > /dev/null
# install versions
awk '{print("asdf install "$1" "$2)}' ~/.tool-versions | sh > /dev/null
# reshim to avaoid problems
awk '{print("asdf reshim "$1" "$2)}' ~/.tool-versions | sh

# go
go get -u golang.org/x/tools/cmd/goimports
go get -u golang.org/x/tools/cmd/godoc
go get -u github.com/cweill/gotests

# nvim
if [[ -x $(command -v nvim) ]] ; then
  PLUGGED_DIR=~/.local/share/nvim/plugged
  if [[ ! -d $PLUGGED_DIR ]] ; then
    curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    mkdir -p $PLUGGED_DIR
    nvim +PlugInstall! +qall
  else
    nvim +PlugUpdate! +qall
  fi
fi

# yarn
[[ ! -x $(command -v yarn) ]] || (curl -o- -L https://yarnpkg.com/install.sh | bash)
# yarn global add sass-lint stylelint prettier jsonlint ember-template-lint --check-files --dev
